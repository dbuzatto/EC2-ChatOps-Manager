# EC2-ChatOps-Manager

Este projeto implementa uma fun√ß√£o AWS Lambda que atua como um chatbot para gerenciamento de inst√¢ncias Amazon EC2. Ele permite que usu√°rios iniciem, parem, verifiquem o status de inst√¢ncias e at√© mesmo agendem a√ß√µes (iniciar/parar) para hor√°rios futuros, tudo atrav√©s de uma interface de chat (por exemplo, Google Chat, Slack, etc.).

## üåü Recursos

* **Controle de Inst√¢ncias EC2**: Inicie, pare e verifique o status de inst√¢ncias EC2 por ID ou nome (tag 'Name').
* **Agendamento de A√ß√µes**: Agende o in√≠cio ou a parada de inst√¢ncias EC2 para um hor√°rio espec√≠fico.
* **Menu Interativo**: Um menu din√¢mico com bot√µes para solicitar a√ß√µes em inst√¢ncias EC2.
* **Lista de Agendamentos**: Visualize todos os agendamentos pendentes.
* **Dele√ß√£o de Agendamentos**: Administradores podem deletar agendamentos.
* **Controle de Acesso**: Permiss√µes baseadas em e-mail para a√ß√µes restritas (ex: deletar agendamentos ou iniciar/parar certas inst√¢ncias).
* **Notifica√ß√µes de Solicita√ß√£o**: Menciona usu√°rios administrativos em solicita√ß√µes de a√ß√£o para inst√¢ncias restritas, permitindo um fluxo de aprova√ß√£o manual.
* **Registro de A√ß√µes**: Tags EC2 s√£o atualizadas com o √∫ltimo usu√°rio que executou uma a√ß√£o e o hor√°rio de parada.

---

## üìã Pr√©-requisitos

Antes de implantar, certifique-se de ter:

* Uma **Conta AWS** ativa.
* **AWS CLI** configurado e autenticado com permiss√µes adequadas.
* **Python 3.x** instalado.
* **pip** para gerenciamento de pacotes Python.
* Uma plataforma de chat integrada (ex: Google Chat, Slack) configurada para interagir com Webhooks ou AWS API Gateway.

---

## üõ†Ô∏è Configura√ß√£o e Implanta√ß√£o

Siga os passos abaixo para configurar e implantar o bot.

### 1. Configurar Permiss√µes AWS (IAM)

Crie uma **Role IAM** para sua fun√ß√£o Lambda com as seguintes permiss√µes:

* `ec2:DescribeInstances`
* `ec2:StartInstances`
* `ec2:StopInstances`
* `ec2:CreateTags`
* `dynamodb:CreateTable` (apenas se voc√™ for criar a tabela via CloudFormation/SDK)
* `dynamodb:GetItem`
* `dynamodb:PutItem`
* `dynamodb:DeleteItem`
* `dynamodb:Scan`
* `logs:CreateLogGroup`
* `logs:CreateLogStream`
* `logs:PutLogEvents`

Exemplo de pol√≠tica (substitua `YOUR_AWS_REGION` e `YOUR_ACCOUNT_ID`):

```json
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "ec2:DescribeInstances",
                "ec2:StartInstances",
                "ec2:StopInstances",
                "ec2:CreateTags"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:DeleteItem",
                "dynamodb:Scan"
            ],
            "Resource": "arn:aws:dynamodb:YOUR_AWS_REGION:YOUR_ACCOUNT_ID:table/EC2InstanceSchedules"
        },
        {
            "Effect": "Allow",
            "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:*"
        }
    ]
}